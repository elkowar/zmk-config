/*
 * vim:ft=dts
 * vim:sw=2
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>


#define QUICK_TAP <200>
#define FLAVOR "tap-preferred"

#define L_MAIN 0
#define L_GAME 1
#define L_SEMI 2
#define L_SYM 3
#define L_NUM 4
#define L_ADJ 5


#define COMBO(name, time, time_free, keys, the_bindings) combo_##name { timeout-ms = <time>; require-prior-idle-ms = <time_free>; key-positions = keys; bindings = <the_bindings>; layers = <L_MAIN L_SEMI L_SYM L_NUM L_ADJ>; }
//#define COMBO(name, time, time_free, keys, the_bindings) combo_##name { timeout-ms = <time>; timeout-ms-freestanding = <time_free>; key-positions = keys; bindings = <the_bindings>; layers = <L_MAIN L_SEMI L_SYM L_NUM L_ADJ>; }
#define MACRO(name, ...) m_##name: m_##name { compatible = "zmk,behavior-macro"; #binding-cells = <0>; /*label = #name; */ bindings = __VA_ARGS__; }

&mt {
  tapping-term-ms = <160>;
  quick_tap_ms = QUICK_TAP;
  flavor = FLAVOR;
};

&lt {
  tapping-term-ms = <160>;
  quick_tap_ms = QUICK_TAP;
  flavor = "balanced";
};

/ {

  behaviors {

    skq: sticky_key_quick_release {
      compatible = "zmk,behavior-sticky-key";
      //label = "STICKY_KEY_QUICK_RELEASE";
      #binding-cells = <1>;
      bindings = <&kp>;
      release-after-ms = <300>;
      quick-release;
    };

    hmgui: homerow_gui {
      compatible = "zmk,behavior-hold-tap";
      //label = "HOMEROW_GUI";
      #binding-cells = <2>;
      tapping-term-ms = <200>;
      quick_tap_ms = QUICK_TAP;
      flavor = "tap-preferred";
      bindings = <&kp>, <&kp>;
    };


    MACRO(double_colon, <&kp COLON>, <&kp COLON>);
    MACRO(fat_arrow,    <&kp EQUAL>, <&kp GT>);
    MACRO(thin_arrow,   <&kp MINUS>, <&kp GT>);
    MACRO(uml_ae,       <&kp RALT>, <&kp DQT>, <&kp A>);
    MACRO(uml_oe,       <&kp RALT>, <&kp DQT>, <&kp O>);
    MACRO(uml_ue,       <&kp RALT>, <&kp DQT>, <&kp U>);
    MACRO(uml_ss,       <&kp RALT>, <&kp S>, <&kp S>);
  };

  combos {
    compatible = "zmk,combos";

    COMBO(control_backspace, 40, 60, <19 21>,    &kp LC(BSPC));


    COMBO(colon,             30, 40, <19 32>,    &kp COLON);
    COMBO(underscore,        30, 40, <20 33>,    &kp UNDERSCORE);
    COMBO(qmark,             20, 30, < 6  8>,    &kp QMARK);
    COMBO(exclmark,          20, 20, <20 22>,    &kp EXCL); 

    COMBO(vert_colon,        30, 40, < 7 19>,    &kp COLON);
    COMBO(vert_underscore,   30, 40, < 8 20>,    &kp UNDERSCORE);
    COMBO(vert_qmark,        20, 20, <13 22>,    &kp QMARK); 

    COMBO(thumb_colon,       20, 30, <41 19>,    &kp COLON);
    COMBO(thumb_underscore,  20, 30, <41 20>,    &kp UNDERSCORE);
    COMBO(thumb_qmark,       20, 30, <41 21>,    &kp QMARK);
    COMBO(thumb_excl,        20, 30, <41 22>,    &kp EXCL);

    COMBO(double_colon,      20, 30, <18 19>,    &m_double_colon); 
    COMBO(fat_arrow,         30, 40, <18 10>,    &m_fat_arrow); 
    COMBO(thin_arrow,        20, 40, <6 18 10>,  &m_thin_arrow); 

    COMBO(uml_ae,            30, 30, <13 14 15>, &m_uml_ae); 
    COMBO(uml_oe,            30, 30, <20 21 22>, &m_uml_oe); 
    COMBO(uml_ue,            30, 30, < 8  9 10>, &m_uml_ue); 
    COMBO(uml_ss,            30, 30, <14 15 16>, &m_uml_ss); 
  };

  keymap {
    compatible = "zmk,keymap";
    default_layer {
      bindings = <
        &lt L_NUM TAB    &kp Q   &kp W       &kp E          &kp R      &kp T                /*  5 */  &kp Y          &kp U          &kp I           &kp O        &kp P       &kp PLUS         /* 11 */
        &mt LCTRL ESC    &kp A   &mt LSHFT S &kp D          &kp F      &kp G                /* 17 */  &kp H          &kp J          &kp K           &mt RSHFT L  &kp SEMI    &kp SQT          /* 23 */
        &kp LSHFT        &kp Z   &kp X       &kp C          &kp V      &kp B      &kp RET   /* 30 */  &kp N          &kp M          &kp COMMA       &kp DOT      &kp MINUS   &kp RSHFT        /* 36 */
                                 &kp LALT    &kp LGUI       &kp SPACE  &kp RET              /* 40 */  &skq LSHIFT    &lt L_SYM BSPC &mo L_NUM       &kp RALT                                  /* 44 */
      >;
      sensor-bindings = <&inc_dec_kp UP DOWN>;
    };

    gaming_layer {
      bindings = <
        &kp TAB          &kp Q   &kp W       &kp E          &kp R      &kp T                /*  5 */  &kp Y          &kp U          &kp I           &kp O        &kp P       &kp PLUS         /* 11 */
        &kp LCTRL        &kp A   &kp S       &kp D          &kp F      &kp G                /* 17 */  &kp H          &kp J          &kp K           &kp L        &kp SEMI    &kp SQT          /* 23 */
        &kp LSHFT        &kp Z   &kp X       &kp C          &kp V      &kp B      &kp ESC   /* 30 */  &kp N          &kp M          &kp COMMA       &kp DOT      &kp MINUS   &kp ESC          /* 36 */
                                 &kp LALT    &kp LGUI       &kp SPACE  &kp RET              /* 40 */  &skq LSHFT     &lt L_SYM BSPC &mo L_NUM       &kp ESC                                   /* 44 */
      >;
      sensor-bindings = <&inc_dec_kp UP DOWN>;
    };

    semimak_layer {
      bindings = <
        &trans        &kp Y     &kp O       &kp U     &kp W      &kp Q                &kp Z      &kp V       &kp H  &kp L        &kp F  &trans    /* 11 */
        &trans        &kp I     &mt LSHFT A &kp E     &kp D      &kp C                &kp K      &kp T       &kp N  &mt RSHFT R  &kp S  &trans    /* 23 */
        &trans        &kp MINUS &kp DOT     &kp COMMA &kp G      &kp P      &trans    &kp J      &kp M       &kp B  &kp SQT      &kp X  &trans    /* 36 */
                                &trans      &trans    &trans     &trans               &trans     &trans      &trans &trans
      >;
      sensor-bindings = <&inc_dec_kp UP DOWN>;
    };

    sym_layer {
      bindings = <
        &trans &kp CARET &kp EXCL  &kp DQT  &kp SLASH &kp BSLH                        &kp GRAVE &kp LBRC  &kp LBKT    &kp RBKT    &kp RBRC   &kp KP_ASTERISK
        &trans &kp HOME  &kp DLLR  &kp LPAR &kp RPAR  &kp END                         &kp LEFT  &kp DOWN  &kp UP      &kp RIGHT   &kp AMPS   &kp PERCENT
        &trans &kp AT    &kp DEL   &kp PIPE &kp QMARK &kp TILDE   &kp C_PLAY_PAUSE    &kp DEL   &kp EQUAL &kp HASH    &kp UNDER   &kp PG_UP  &kp PG_DN
                         &trans    &trans   &trans    &mo L_ADJ                       &trans    &trans    &trans      &trans
      >;
      sensor-bindings = <&inc_dec_kp LEFT RIGHT>;
    };

    numpad_layer {
      bindings = <
        &trans &trans    &trans    &trans   &trans  &trans                        &trans  &kp N7  &kp N8  &kp N9  &kp COMMA   &kp PLUS
        &trans &kp LCTRL &kp LSHFT &kp LGUI &trans  &trans                        &trans  &kp N1  &kp N2  &kp N3  &kp DOT     &trans
        &trans &trans    &trans    &trans   &trans  &trans    &kp C_PLAY_PAUSE    &trans  &kp N4  &kp N5  &kp N6  &kp MINUS   &trans
                         &trans    &trans   &trans  &trans                        &kp N0  &kp N0  &trans  &trans
      >;
      sensor-bindings = <&inc_dec_kp LC(LS(TAB)) LC(TAB)>;
    };

    adjust_layer {
      bindings = <
        &bt BT_CLR    &kp F1          &kp F2          &kp F3          &kp F4          &kp F5                    &kp F6  &kp F7        &kp F8        &kp F9      &kp F10           &to L_MAIN
        &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4    &none                     &none   &none         &none         &kp F11     &kp F12           &to L_SEMI
        &trans        &none           &none           &none           &none           &none       &kp C_MUTE    &none   &kp INSERT    &kp PSCRN     &kp SLCK    &kp PAUSE_BREAK   &to L_GAME
                                      &trans          &trans          &trans          &trans                    &trans  &trans        &trans        &trans
      >;
      sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;
    };


  };
};
